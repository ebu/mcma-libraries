import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def requiredVersionNodeJS = "10.16.3"
def requiredVersionTsc = "3.7.2"

allprojects {
    ext {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            nodeExecutable = Arrays.asList("node")
            npmExecutable = Arrays.asList("cmd", "/c", "npm")
            tscExecutable = Arrays.asList("cmd", "/c", "tsc")
        } else {
            nodeExecutable = Arrays.asList("node")
            npmExecutable = Arrays.asList("npm")
            tscExecutable = Arrays.asList("tsc")
        }
    }
}

def getVersionNodeJS = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine nodeExecutable
            args "--version"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim().replace("v", "")
}

def getVersionTsc = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine tscExecutable
            args "-v"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim().replace("Version ", "")
}

task verifyNodeJS {
    inputs.property("VERSION_NODE_JS", requiredVersionNodeJS)
    outputs.upToDateWhen { getVersionNodeJS() == requiredVersionNodeJS }
    doLast {
        def versionNodeJs = getVersionNodeJS()
        if (versionNodeJs != requiredVersionNodeJS) {
            throw new Exception("Required Node version " + requiredVersionNodeJS + " not installed. Detected version " + versionNodeJs)
        }
    }
}

task verifyTsc {
    inputs.property("VERSION_TSC", requiredVersionTsc)
    outputs.upToDateWhen { getVersionTsc() == requiredVersionTsc }
    doLast {
        def versionTsc = getVersionTsc()
        if (versionTsc != requiredVersionTsc) {
            throw new Exception("Required tsc version " + requiredVersionTsc + " not installed. Detected version " + versionTsc)
        }
    }
}

task build {
    dependsOn "aws:build"
    dependsOn "base:build"
}

task clean {}

subprojects {
    task setVersion {
        def packageJson = file("package.json")

        enabled packageJson.exists()
        inputs.file(packageJson)
        inputs.property("VERSION", VERSION)
        outputs.file(packageJson)

        doLast {
            def jsonSlurper = new JsonSlurper()
            def object = jsonSlurper.parse(file("package.json"))

            object.version = VERSION

            if (object.peerDependencies != null) {
                object.peerDependencies.keySet().each {
                    object.peerDependencies[it] = it.startsWith("@mcma/") ? VERSION : object.peerDependencies[it]
                }
            }
            if (object.devDependencies != null) {
                object.devDependencies.keySet().each {
                    object.devDependencies[it] = it.startsWith("@mcma/") ? VERSION : object.devDependencies[it]
                }
            }

            def json = JsonOutput.toJson(object)
            def jsonPretty = JsonOutput.prettyPrint(json) + "\n"

            packageJson.write(jsonPretty)
        }
    }

    task npmInstall(type: Exec) {
        dependsOn verifyNodeJS
        enabled file("package.json").exists()
        inputs.file("package.json")
        outputs.file("package-lock.json")
        outputs.dir("node_modules")
        commandLine npmExecutable
        args "install"
    }

    task npmUpdate(type: Exec) {
        dependsOn verifyNodeJS
        enabled file("package.json").exists()
        inputs.file "package.json"
        inputs.property("todaysDate", new Date().clearTime())
        outputs.upToDateWhen { true }
        commandLine npmExecutable
        args "update"
    }

    task tsc(type: Exec) {
        dependsOn verifyNodeJS
        enabled file("tsconfig.json").exists()
        enabled file("package.json").exists()
        inputs.file("tsconfig.json")
        inputs.file("package.json")
        commandLine tscExecutable
        
        doFirst {
            delete "dist"
        }
    }

    task npmPublish(type: Exec) {
        dependsOn verifyNodeJS
        dependsOn tsc
        enabled file("package.json").exists()
        inputs.file("package.json")
        commandLine npmExecutable
        args "publish", "--access", "public", "--registry", "https://registry.npmjs.org"
    }

    task npmPublishLocal(type: Exec) {
        dependsOn verifyNodeJS
        dependsOn tsc
        enabled file("package.json").exists()
        inputs.file("package.json")
        commandLine npmExecutable
        args "publish", "--access", "public", "--registry", "http://localhost:4873"
    }

    task clean(type: Delete) {
        delete "build"
        delete "node_modules"
    }
}

afterEvaluate {
    // avoiding simultaneous connections to npmjs.com
    def prevTask = null
    project.subprojects.each {
        def task = it.tasks.find { task -> task.name.contains('npmUpdate') }
        if (task != null) {
            if (prevTask != null) {
                task.mustRunAfter(prevTask)
            }
            prevTask = task
        }
    }

    prevTask = null
    project.subprojects.each {
        def task = it.tasks.find { task -> task.name.contains('npmInstall') }
        if (task != null) {
            if (prevTask != null) {
                task.mustRunAfter(prevTask)
            }
            prevTask = task
        }
    }
}
