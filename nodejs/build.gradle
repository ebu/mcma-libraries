def requiredVersionNodeJS = "10.16.3"
def requiredVersionTsc = "3.7.2"

allprojects {
    ext {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            nodeExecutable = Arrays.asList("node")
            npmExecutable = Arrays.asList("cmd", "/c", "npm")
            tscExecutable = Arrays.asList("cmd", "/c", "tsc")
        } else {
            nodeExecutable = Arrays.asList("node")
            npmExecutable = Arrays.asList("npm")
            tscExecutable = Arrays.asList("tsc")
        }
    }
}

def getVersionNodeJS = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine nodeExecutable
            args "--version"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim().replace("v", "")
}

def getVersionTsc = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine tscExecutable
            args "-v"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim().replace("Version ", "")
}

task verifyNodeJS {
    inputs.property("VERSION_NODE_JS", requiredVersionNodeJS)
    outputs.upToDateWhen { getVersionNodeJS() == requiredVersionNodeJS }
    doLast {
        def versionNodeJs = getVersionNodeJS()
        if (versionNodeJs != requiredVersionNodeJS) {
            throw new Exception("Required Node version " + requiredVersionNodeJS + " not installed. Detected version " + versionNodeJs)
        }
    }
}

task verifyTsc {
    inputs.property("VERSION_TSC", requiredVersionTsc)
    outputs.upToDateWhen { getVersionTsc() == requiredVersionTsc }
    doLast {
        def versionTsc = getVersionTsc()
        if (versionTsc != requiredVersionTsc) {
            throw new Exception("Required tsc version " + requiredVersionTsc + " not installed. Detected version " + versionTsc)
        }
    }
}

task clean {}

afterEvaluate {
    // avoiding simultaneous connections to npmjs.com
    def prevTask = null
    project.subprojects.each {
        def task = it.tasks.find { task -> task.name.contains("npmUpdate") }
        if (task != null) {
            if (prevTask != null) {
                task.mustRunAfter(prevTask)
            }
            prevTask = task
        }
    }

    prevTask = null
    project.subprojects.each {
        def task = it.tasks.find { task -> task.name.contains("npmInstall") }
        if (task != null) {
            if (prevTask != null) {
                task.mustRunAfter(prevTask)
            }
            prevTask = task
        }
    }
}
