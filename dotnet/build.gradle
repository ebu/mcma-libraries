def requiredVersionDotnet = "~3.1.0"

allprojects {
    ext {
        dotnetExecutable = Arrays.asList("dotnet")
    }
}

static def isSemVerMatching(String actual, String expected) {
    def beginIndex
    def equalParts

    if (expected.startsWith("^")) {
        beginIndex = 1
        equalParts = 1
    } else if (expected.startsWith("~")) {
        beginIndex = 1
        equalParts = 2
    } else {
        beginIndex = 0
        equalParts = 3
    }

    def expectedParts = expected.substring(beginIndex).split(/\./).collect { it as int }
    def actualParts = actual.split(/\./).collect { it as int }

    for (def i = 0; i < expectedParts.size(); i++) {

        if (i < equalParts) {
            if (actualParts[i] != expectedParts[i]) {
                return false
            }
        } else {
            if (actualParts[i] > expectedParts[i]) {
                return true
            }
            if (actualParts[i] < expectedParts[i]) {
                return false
            }
        }
    }

    return true
}

def getVersionDotnet = { ->
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    try {
        exec {
            commandLine dotnetExecutable
            args "--version"
            standardOutput stdout
            errorOutput stderr
        }
    } catch (Exception ignored) {
    }

    return stdout.toString().trim()
}

task verifyDotnetVersion {
    inputs.property("VERSION_DOTNET", requiredVersionDotnet)
    outputs.upToDateWhen { isSemVerMatching(getVersionDotnet(), requiredVersionDotnet) }
    doLast {
        def versionDotnet = getVersionDotnet()
        if (!isSemVerMatching(versionDotnet, requiredVersionDotnet)) {
            throw new Exception("Required .NET version " + requiredVersionDotnet + " not installed. Detected version " + versionDotnet)
        }
    }
}

task build(type: Exec) {
    dependsOn verifyDotnetVersion
    inputs.file("Mcma.Libraries.sln")
    commandLine dotnetExecutable
    args "build"
    args "-c=Release"
}

task pack(type: Exec) {
    dependsOn verifyDotnetVersion
    inputs.file("Mcma.Libraries.sln")
    commandLine dotnetExecutable
    args "pack"
    args "-c=Release"
}