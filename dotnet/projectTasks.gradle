task setVersion {
    def projectFile = file(getProjectDir().getName() + ".csproj")

    inputs.file(projectFile)
    inputs.property("VERSION", VERSION)
    outputs.file(projectFile)

    if (!projectFile.exists()) {
        throw new Exception("Project file not found: " + projectFile.getPath());
    }

    doLast {
        def projectFileContents = projectFile.getText("UTF-8")

        def updated =
            projectFileContents.replaceFirst(
                /\<PackageVersion\>\d+\.\d+\.\d+(?:-(?:alpha|beta|rc)\d+)?\<\/PackageVersion\>/,
                "<PackageVersion>" + VERSION + "</PackageVersion>")

        projectFile.write(updated)
    }
}

task nugetPush(type: Exec) {
    dependsOn ":pack"

    def projectName = getProjectDir().getName()

    commandLine dotnetExecutable
    args "nuget"
    args "push"
    args "bin/packages/" + projectName + "." + VERSION + ".nupkg"
    args "-s=https://api.nuget.org/v3/index.json"
    args "-k=" + System.getenv("NUGET_API_KEY")
}

task nugetPushLocal(type: Exec) {
    dependsOn ":pack"

    def projectName = getProjectDir().getName()

    commandLine dotnetExecutable
    args "nuget"
    args "push"
    args "bin/packages/" + projectName + "." + VERSION + ".nupkg"
    args "-s=Local"
}